/* [wxMaxima batch file version 1] [ DO NOT EDIT BY HAND! ]*/
/* [ Created with wxMaxima version 19.03.1 ] */
/* [wxMaxima: title   start ]
Attitude and position estimation with quaternions
   [wxMaxima: title   end   ] */


/* [wxMaxima: comment start ]
Source:
    - [1] PhilippeMartin2010 - Generalized Multiplicative Extended Kalman Filter for Aided Attitude and Heading Reference System
    - [2] Markley2003 - Attitude Error Representations for Kalman Filtering
    - [3] Diebel2006    - Representing Attitude_ Euler Angles, Unit Quaternions, and Rotation Vectors
    - [4] Barton2012   - Fundamentals of Small Unmanned Aircraft Flight
    - [5] Maley2013     - Multiplicative Quaternion Extended Kalman Filtering for Nonspinning Guided Projectiles
    - [6] 4608934       - Nonlinear Complementary Filters on the Special Orthogonal Group

   [wxMaxima: comment end   ] */


/* [wxMaxima: section start ]
Usefull packages
   [wxMaxima: section end   ] */


/* [wxMaxima: input   start ] */
if get('facexp,'version)=false then load(facexp);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: section start ]
Definitions, Physical equations and measurements
   [wxMaxima: section end   ] */


/* [wxMaxima: subsect start ]
Quaternions
   [wxMaxima: subsect end   ] */


/* [wxMaxima: comment start ]
In [1] and [3] the quaternsion is defined as follows:
q := transpose(matrix([q0, q_vec])) with
q_vec:= transpose(matrix([q1,q2,q3]))
   [wxMaxima: comment end   ] */


/* [wxMaxima: subsect start ]
Calculation rules
   [wxMaxima: subsect end   ] */


/* [wxMaxima: input   start ] */
p: transpose(matrix([p0,p1,p2,p3]));
/* 1)  conjecture (vermutung) p * (q^-1 *p) ^-1 = p * p^-1 * q = q */
    gl1: facsum(q_mult(p,q_invert(q_mult(q_invert(q),p))), (p3^2+p2^2+p1^2+p0^2)=1);
/* 2) conjecture: d/dt (q^-1) = (d/dt(q))^-1 */
/* 3) conjecture: (hat{q} q^-1)^-1 = q * hat{q}^-1*/
    gl3: facsum(q_invert(q_mult(p,q_invert(q)))) - q_mult(q,q_invert(p));
/* [wxMaxima: input   end   ] */


/* [wxMaxima: subsubsect start ]
Using atensor to represent quaternions
   [wxMaxima: subsubsect end   ] */


/* [wxMaxima: comment start ]
Did not find an invert operator
   [wxMaxima: comment end   ] */


/* [wxMaxima: hide output   ] */
/* [wxMaxima: input   start ] */
/* https://def.fe.up.pt/pipermail/maxima-discuss/2010/034816.html */
/* comment out, if using own definition of quaternions*/
/*if get('atensor,'version)=false then load(atensor)$
init_atensor(quaternion)$
quat(q0,q1,q2,q3):= q0+q1.v[1]+q2.v[2]+q3.v[1].v[2];
quat_vec(a):= 0+a[1][1].v[1]+a[2][1].v[2]+a[3][1].v[1].v[2];

q: quat(q0,q1,q2,q3);*/

/* example using atensor */
/*q_atens: quat(15,5,3,1);
q_btens: quat(14,22,36,42);
expand(atensimp(q_atens.q_btens));*/;
/* [wxMaxima: input   end   ] */
/* [wxMaxima: answer  start ] */
;

/* [wxMaxima: answer  end   ] */
/* [wxMaxima: answer  start ] */
eof;
/* [wxMaxima: answer  end   ] */


/* [wxMaxima: subsubsect start ]
Using own representation of the quaternions
   [wxMaxima: subsubsect end   ] */


/* [wxMaxima: input   start ] */
/* Don't use vect with atensor, because vect removes the existing
rule for the operator . */
load("vect");
q_vec: transpose(matrix([q_1,q_2,q_3]))$
q: addrow(matrix([q_0]),q_vec);

/* [3] equation 98 */
q_adjoint(q):= transpose(matrix([q[1][1],-q[2][1],-q[3][1],-q[4][1]]))$
/* [3] equation 100, unit quaternion: ||q|| = 1 */
q_invert(q):= q_adjoint(q);

/* [3] equation 109 */
q_matrix(q):=matrix([q[1][1],-q[2][1],-q[3][1],-q[4][1]],[q[2][1],q[1][1],q[4][1],-q[3][1]],[q[3][1],-q[4][1],q[1][1],q[2][1]],[q[4][1],q[3][1],-q[2][1],q[1][1]])$
/* [1] Appendix: Quaternions an [3] equation  102 are not the same*/
/* In the crossproduct q,p are interchanged to the equation 102 in [3]
don't understand why I get then the same result than Barton [4]. */
q_mult(q,p):= addrow(matrix([q[1][1]*p[1][1]-(q[2][1]*p[2][1]+q[3][1]*p[3][1]+q[4][1]*p[4][1])]),q[1][1]*transpose(matrix([p[2][1],p[3][1],p[4][1]]))+p[1][1]*transpose(matrix([q[2][1],q[3][1],q[4][1]]))-express([q[2][1],q[3][1],q[4][1]]~[p[2][1],p[3][1],p[4][1]]));

/* [1] Appendix: Quaternions */
/* Create quaternion from vector of R^3 */
p3toquat(a):= addrow(matrix([0]), a)$

/*example: */
/* q_a: transpose(matrix([-0.5,-0.2,-0.3,0.787400787]));
q_b: transpose(matrix([0.5,0.7,0.3,0.412310563]));
q_c: transpose(matrix([-0.5,-0.7,0,0.509901951]));
q_mult(q_c,q_mult(q_b,q_invert(q_a))); */

/* [wxMaxima: input   end   ] */


/* [wxMaxima: heading5 start ]
Rotation in quaternions
   [wxMaxima: heading5 end   ] */


/* [wxMaxima: input   start ] */
/* Rotation from earth to body coords */
/* Re_to_b.w = q_mult(q,q_mult(p3toquat(w),q_invert(q))); */
Re_to_b: matrix([ 1-2*(q_2^2+q_3^2)    ,2*(q_1*q_2+q_3*q_0)     ,2*(q_1*q_3-q_2*q_0)],
                              [2*(q_1*q_2-q_3*q_0)    ,1-2*(q_1^2+q_3^2)     ,2*(q_2*q_3+q_1*q_0)],
                              [2*(q_1*q_3+q_2*q_0)    ,2*(q_2*q_3-q_1*q_0) ,1-2*(q_1^2+q_2^2)]);

Rb_to_e: transpose(Re_to_b);

Re_to_b(q):= matrix([ 1-2*(q[3][1]^2+q[4][1]^2)    ,2*(q[2][1]*q[3][1]+q[4][1]*q[1][1])     ,2*(q[2][1]*q[4][1]-q[3][1]*q[1][1])],
                              [2*(q[2][1]*q[3][1]-q[4][1]*q[1][1])    ,1-2*(q[2][1]^2+q[4][1]^2)     ,2*(q[3][1]*q[4][1]+q[2][1]*q[1][1])],
                              [2*(q[2][1]*q[4][1]+q[3][1]*q[1][1])    ,2*(q[3][1]*q[4][1]-q[2][1]*q[1][1]) ,1-2*(q[2][1]^2+q[3][1]^2)]);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: heading6 start ]
Evaluation of rotation matrix
   [wxMaxima: heading6 end   ] */


/* [wxMaxima: input   start ] */
ev(Re_to_b, q_0=1, q_1=0, q_2=0, q_3=0); /* must be unit matrix for [1,0,0,0] */
/* [wxMaxima: input   end   ] */


/* [wxMaxima: subsubsect start ]
Using "quaternion" package to represent Quaternions
   [wxMaxima: subsubsect end   ] */


/* [wxMaxima: comment start ]
Problem: not able to express as matrix
   [wxMaxima: comment end   ] */


/* [wxMaxima: hide output   ] */
/* [wxMaxima: input   start ] */
/*if get('quaternion,'version)=false then load(quaternion)$
q_vec(a):= 0+a[1][1]*i+a[2][1]*j+a[3][1]*k;
q: q0+q1*i+q2*j+q3*k;*/
/* Examples how to use the "quaternion" package */
/*q1: 15+5*i+3*j+1*k;
q2: 14+22*i+36*j+42*k;

expand4(q1.q2);
inv4(q1);
norm4(q1);*/;
/* [wxMaxima: input   end   ] */


/* [wxMaxima: subsect start ]
Cross matrix
   [wxMaxima: subsect end   ] */


/* [wxMaxima: comment start ]
Calculating the cross product with a matrix:
a x b = A.b with A the crossmatrix of a
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
cross_mat(a):= matrix([0,-a[3][1],a[2][1]],[a[3][1],0,-a[1][1]],[-a[2][1],a[1][1],0]);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: subsubsect start ]
Calculation rules with cross matrix
   [wxMaxima: subsubsect end   ] */


/* [wxMaxima: input   start ] */
/* conjecture: cross_mat(a).b = -cross_mat(b).a */
/* Test: */
/*a: transpose(matrix([a1,a2,a3]));
b: transpose(matrix([b1,b2,b3]));
cross_mat(a).b-(-cross_mat(b).a);*/;
/* [wxMaxima: input   end   ] */


/* [wxMaxima: subsect start ]
Measurements
   [wxMaxima: subsect end   ] */


/* [wxMaxima: comment start ]
Measurements with included bias and scale factors
   [wxMaxima: comment end   ] */


/* [wxMaxima: subsubsect start ]
Position
   [wxMaxima: subsubsect end   ] */


/* [wxMaxima: input   start ] */
X: transpose(matrix([x_x,x_y,x_z]));
V: transpose(matrix([v_x,v_y,v_z]));
/* [wxMaxima: input   end   ] */


/* [wxMaxima: subsubsect start ]
Angular rate
   [wxMaxima: subsubsect end   ] */


/* [wxMaxima: input   start ] */
w: transpose(matrix([w_phi,w_theta,w_psi]));
b_w: transpose(matrix([b_w_phi, b_w_theta, b_w_psi])); /* Bias */
w_m:  transpose(matrix([w_phi_m,w_theta_m, w_psi_m]))/* = w+w_b; /* measured angular rate */;
 
/* [wxMaxima: input   end   ] */


/* [wxMaxima: subsubsect start ]
Acceleration
   [wxMaxima: subsubsect end   ] */


/* [wxMaxima: input   start ] */
a: transpose(matrix([a_x,a_y,a_z]));
b_a: transpose(matrix([b_ax,b_ay, b_az]));
a_m : a; /* measured acceleration */

/* Gravity*/
G: transpose(matrix([0,0,g_mps2]));

/* [wxMaxima: input   end   ] */


/* [wxMaxima: subsubsect start ]
Magnetometer
   [wxMaxima: subsubsect end   ] */


/* [wxMaxima: input   start ] */
/* from Systemmatrix.wxmx*/

/* from NED(North-East-Down) to magnetic NED */
/*delta_i: 0;
delta_d: 0; */
delta_i_rad: delta_i*%pi/180;
delta_d_rad: delta_d*%pi/180;
B:matrix(  [cos((%pi*delta_d)/180)*cos((%pi*delta_i)/180)],
                [-sin((%pi*delta_d)/180)*cos((%pi*delta_i)/180)],
                [-sin((%pi*delta_i)/180)]);

me: transpose(matrix([1,0,0]));
/* Quaternion rotation of the magnetic field (not working)*/
/*qy_m: transpose(matrix([-delta_i_rad, 0,1,0]));
qz_m: transpose(matrix([delta_d_rad, 0,0,1]));
q_m: q_mult(qy_m,qz_m)$
m_test: Re_to_b(q_m).me;*/
/* [wxMaxima: input   end   ] */


/* [wxMaxima: section start ]
Standard EKF AHRS [4]
   [wxMaxima: section end   ] */
/* [wxMaxima: fold    start ] */
/* [wxMaxima: comment start ]
EKF where after the EKF state estimation the quaternions must be normalized
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
/* when using own definition of quaternions*/
/* source: [2] equation 10 */ 
/*addcol(-cross_mat(w_m-w_b),w_m-w_b)$
omega_w: addrow(%, addcol(-transpose(w_m-w_b),matrix([0]))); 

 /* in Barton ist die Reihenfolge vertauscht!!!! */
/*addcol(-cross_mat(w),w)$
omega_w_ideal: addrow(%, addcol(-transpose(w),matrix([0]))); 

Q: matrix([q11,q12,q13],[q21,q22,q23],[q31,q32,q33],[q41,q42,q43]);
Q.(w)- omega_w_ideal.q = 0;
facsum(%, w_x,w_y, w_z);*/;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
declare(G, nonscalar);
declare(V, nonscalar);
declare(X, nonscalar);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
q_invert(q);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: subsect start ]
State equation
   [wxMaxima: subsect end   ] */

/* [wxMaxima: input   start ] */
/*states: */
scalefactors([q_0,q_1,q_2,q_3,b_w_phi,b_w_theta,b_w_psi]);
/* in [3] there is q*w not w*q which is in [4] */

/* Calculation of q_dot*/
q_dot: 1/2*q_mult(p3toquat(w_m-b_w),q);
/* Alternative calculation ([4], [3] equation 151 and 159)*/
/* w_m is in body coords */
/*W_q_transpose: transpose(matrix( [-q_1,q_0,q_3,-q_2],
                                                    [-q_2,-q_3,q_0,q_1],
                                                    [-q_3,q_2,-q_1,q_0]));

q_dot_alt:1/2* W_q_transpose.(w_m-b_w);
test_q_dot: ratsimp(q_dot-q_dot_alt);*/

X_dot: transpose(matrix([v_x,v_y,v_z]));
/* q*p3toquat(a_m)*q_inv is a rotation */
V_dot: p3toquat(G)+ q_mult(q,q_mult(p3toquat(a_m-b_a),q_invert(q)))$
/* optimization: q0^2 + q1^2-  q2^2 - q3^2 (4 multiplications) = 1-2(q2^2+q3^2) (3 multiplications) --> less multiplications*/
V_dot: facsum(transpose(matrix([V_dot[2][1],V_dot[3][1],V_dot[4][1]])),a_x,a_y,a_z,b_ax,b_ay, b_az)$
V_dot: ev(V_dot, q_0^2+q_1^2-q_2^2-q_3^2 = 1-2*(q_2^2+q_3^2),
                         q_0^2-q_1^2+q_2^2-q_3^2=1-2*(q_1^2+q_3^2),
                         q_0^2-q_1^2-q_2^2+q_3^2=1-2*(q_1^2+q_2^2),
                        q_3^2+q_2^2-q_1^2-q_0^2=2*(q_2^2+q_3^2)-1,
                        q_3^2-q_2^2+q_1^2-q_0^2 = 2*(q_1^2+q_3^2)-1)$
V_dot: facsum(V_dot,b_ax-a_x);

/*Equivalent to [4] (matlab skript): */
/* rotmat: ev(matrix([ 1-2*(q_2^2+q_3^2)    ,2*(q_1*q_2+q_3*q_0)     ,2*(q_1*q_3-q_2*q_0)],
             [2*(q_1*q_2-q_3*q_0)    ,1-2*(q_1^2+q_3^2)     ,2*(q_2*q_3+q_1*q_0)],
             [2*(q_1*q_3+q_2*q_0)    ,2*(q_2*q_3-q_1*q_0) ,1-2*(q_1^2+q_2^2)]),
                1-2*(q_2^2+q_3^2) = q_0^2+q_1^2-q_2^2-q_3^2,
                1-2*(q_1^2+q_3^2) = q_0^2-q_1^2+q_2^2-q_3^2,
                1-2*(q_1^2+q_2^2) = q_0^2-q_1^2-q_2^2+q_3^2);
V_dot2: facsum(A+rotmat.(a_m-b_a),a_x,a_y,a_z);
test_V_dot: ev(facsum(V_dot2-V_dot,a_x,a_y,a_z),q_3^2+q_2^2+q_1^2+q_0^2-1=0); /* must be zero */

b_w_dot: transpose(matrix([0,0,0])); /* bias angular velocity */
b_a_dot: transpose(matrix([0,0,0])); /* bias acceleration */
h_b_dot: matrix([0]); /* bias height */
state_dot: addrow(q_dot, b_w_dot);

A_lin: express(grad(state_dot))$
A_lin: ev(A_lin,diff)$
temp: matrix()$
for deriv in A_lin do
    temp: addcol(temp, deriv);
A_lin: temp;
kill(temp);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: subsect start ]
Measurement equation
   [wxMaxima: subsect end   ] */

/* [wxMaxima: input   start ] */
scalefactors([q_0,q_1,q_2,q_3,b_w_phi,b_w_theta,b_w_psi]);
y_V: V;
y_X: X;
y_h: matrix([X[3]-h_b]);
y_a: cross_mat(w_m-b_w).V + Re_to_b.G;  /* = q_mult(q,q_mult(p3toquat(G),q_invert(q));*/
y_B: Re_to_b.B; /*facsum(q_mult(q,q_mult(p3toquat(B),q_invert(q))),b1,b2,b3); */
H: addrow(y_a, y_B);
gdf: grad(H)$
gdf: express(gdf)$
H_lin: ev(gdf, diff)$ /* ev evaluates the derivations */
temp: matrix()$
for deriv in H_lin do
    temp: addcol(temp, deriv)$
H_lin: temp;
kill(temp);
 
/* [wxMaxima: input   end   ] */

/* [wxMaxima: subsubsect start ]
Evaluation of y_k, H_lin
   [wxMaxima: subsubsect end   ] */

/* [wxMaxima: input   start ] */
/* phi=theta=psi=0 --> q_0=1, q_1=q_2=q_3=0 */
y_eval: ev(H, v_x=0, v_y=0, v_z= 0, b_w_phi=1, b_w_theta=1, b_w_psi=1, g_mps2=9.81, q_0 = 1, q_1=0, q_2=0, q_3=0, delta_d=3, delta_i=64, w_phi_m=1, w_theta_m=1, w_psi_m=1);

/* q = [0.707, 0, 0.707, 0] */
/* --> acceleration of the x component must be -9.81, z component of the magnetic field must be 1*/ 
y_eval: float(ev(H, v_x=0, v_y=0, v_z= 100, b_w_phi=1, b_w_theta=1, b_w_psi=1, g_mps2=9.81, q_0 = 0.707, q_1=0, q_2=0.707, q_3=0, delta_d=0, delta_i=0, w_phi_m=1, w_theta_m=1, w_psi_m=1))$

H_lin_eval: ev(H_lin, q_0 = 1, q_1=0, q_2=0, q_3=0, delta_d=0, delta_i=0, v_x=0, v_y=0, v_z= 0);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: subsubsect start ]
Evaluation of x_dot, G_lin
   [wxMaxima: subsubsect end   ] */
/* [wxMaxima: fold    start ] */
/* [wxMaxima: input   start ] */
x_dot: ev(state_dot, v_x=0, v_y=0, v_z= 0, b_w_phi=0, b_w_theta=0, b_w_psi=0, g_mps=9.81, q_0 = 1, q_1=0, q_2=0, q_3=0, delta_d=0, delta_i=0, w_phi_m=0, w_theta_m=0, w_psi_m=0);
A_lin_eval: ev(A_lin, v_x=0, v_y=0, v_z= 0, b_w_phi=0, b_w_theta=0, b_w_psi=0, g_mps=9.81, q_0 = 1, q_1=0, q_2=0, q_3=0, delta_d=0, delta_i=0, w_phi_m=0, w_theta_m=0, w_psi_m=0);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: fold    end   ] */


/* [wxMaxima: fold    end   ] */


/* [wxMaxima: subsubsect start ]
Calculation of Covariance matrix
   [wxMaxima: subsubsect end   ] */
/* [wxMaxima: fold    start ] */
/* [wxMaxima: input   start ] */
/* possible to use list_matrix_entries? */
sigma_2_w: transpose(matrix([sigma_2_q0, sigma_2_q1, sigma_2_q2, sigma_2_q3]))$
sigma_2_b_w: transpose(matrix([sigma_2_b_w_phi, sigma_2_b_w_theta, sigma_2_b_w_psi]))$
Q: diag_matrix(sigma_2_q0, sigma_2_q1, sigma_2_q2, sigma_2_q3,
                        sigma_2_b_w_phi, sigma_2_b_w_theta, sigma_2_b_w_psi)$
R_k: diag_matrix(sigma_2_aphi, sigma_2_atheta, sigma_2_apsi, sigma_2_mphi, sigma_2_mtheta, sigma_2_mpsi)$
zero7: zeromatrix(7,7)$
AA: addcol(addrow(-A_lin, zero7),
                addrow(Q, transpose(A_lin)))$
BB: AA$ /*exp(AA); */
PHI_k: transpose(submatrix(1,2,3,4,5,6,7,BB,1,2,3,4,5,6,7))$
Q_k: PHI_k.submatrix(8,9,10,11,12,13,14,BB,1,2,3,4,5,6,7)$
P_k1: matrix([pk1_11, pk1_12, pk1_13, pk1_14, pk1_15, pk1_16, pk1_17],
                    [pk1_21, pk1_22, pk1_23, pk1_24, pk1_25, pk1_26, pk1_27],
                    [pk1_31, pk1_32, pk1_33, pk1_34, pk1_35, pk1_36, pk1_37],
                    [pk1_41, pk1_42, pk1_43, pk1_44, pk1_45, pk1_46, pk1_47],
                    [pk1_51, pk1_52, pk1_53, pk1_54, pk1_55, pk1_56, pk1_57],
                    [pk1_61, pk1_62, pk1_63, pk1_64, pk1_65, pk1_66, pk1_67],
                    [pk1_71, pk1_72, pk1_73, pk1_74, pk1_75, pk1_76, pk1_77])$
P_k_k1: PHI_k.P_k1.transpose(PHI_k) + Q_k$
P_y_y1: R_k+H_lin.P_k_k1.transpose(H_lin);


/*P_y_y1_inv: invert(P_y_y1)$
K_k: P_k_k1.tranpose(H_lin).P_y_y1_inv;
P_k: P_k_k1 - K_k.H_lin.P_k_k1; */

/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
P_y_y1: ratsubst(simp1, q_3*((pk1_72*(w_theta_m-b_w_theta))/2+(pk1_71*(w_psi_m-b_w_psi))/2+(pk1_73*(b_w_phi-w_phi_m))/2+(pk1_75*q_2)/2-(pk1_76*q_1)/2-(pk1_77*q_0)/2), P_y_y1);
/*P_y_y1: ratsubst(simp2, q_2*((pk1_62*(w_theta_m-b_w_theta))/2+(pk1_61*(w_psi_m-b_w_psi))/2+(pk1_63*(b_w_phi-w_phi_m))/2+(pk1_65*q_2)/2-(pk1_66*q_1)/2-(pk1_67*q_0)/2), P_y_y1)$
P_y_y1: ratsubst(simp3, ((pk1_42*(w_theta_m-b_w_theta))/2+(pk1_41*(w_psi_m-b_w_psi))/2+(pk1_43*(b_w_phi-w_phi_m))/2+(pk1_45*q_2)/2-(pk1_46*q_1)/2-(pk1_47*q_0)/2), P_y_y1)$
P_y_y1: ratsubst(simp4, (q_2*((pk1_72*(w_theta_m-b_w_theta))/2+(pk1_71*(w_psi_m-b_w_psi))/2+(pk1_73*(b_w_phi-w_phi_m))/2+(pk1_75*q_2)/2-(pk1_76*q_1)/2-(pk1_77*q_0)/2))/2, P_y_y1)$
P_y_y1: ratsubst(simp5, q_1*((pk1_72*(w_theta_m-b_w_theta))/2+(pk1_71*(w_psi_m-b_w_psi))/2+(pk1_73*(b_w_phi-w_phi_m))/2+(pk1_75*q_2)/2-(pk1_76*q_1)/2-(pk1_77*q_0)/2), P_y_y1)$
P_y_y1: ratsubst(simp6, (q_0*((pk1_62*(w_theta_m-b_w_theta))/2+(pk1_61*(w_psi_m-b_w_psi))/2+(pk1_63*(b_w_phi-w_phi_m))/2+(pk1_65*q_2)/2-(pk1_66*q_1)/2-(pk1_67*q_0)/2))/2, P_y_y1)$
P_y_y1: ratsubst(simp7, (q_0*((pk1_72*(w_theta_m-b_w_theta))/2+(pk1_71*(w_psi_m-b_w_psi))/2+(pk1_73*(b_w_phi-w_phi_m))/2+(pk1_75*q_2)/2-(pk1_76*q_1)/2-(pk1_77*q_0)/2))/2, P_y_y1);*/

/* [wxMaxima: input   end   ] */


/* [wxMaxima: fold    end   ] */


/* [wxMaxima: section start ]
Standard Multiplicative Extended Kalman Filter [5]
   [wxMaxima: section end   ] */


/* [wxMaxima: comment start ]
Used the quaternion definitions from [5]
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
/* all differential equations must be reorder (interchange p,q) to get the same result than in q_mult */
q_mult_maley(p, q):= addrow(matrix([p[1][1]*q[1][1]-(p[2][1]*q[2][1]+p[3][1]*q[3][1]+p[4][1]*q[4][1])]),p[1][1]*transpose(matrix([q[2][1],q[3][1],q[4][1]]))+q[1][1]*transpose(matrix([p[2][1],p[3][1],p[4][1]]))+express([p[2][1],p[3][1],p[4][1]]~[q[2][1],q[3][1],q[4][1]]));
/* [wxMaxima: input   end   ] */


/* [wxMaxima: subsect start ]
State matrix / Measurement matrix
   [wxMaxima: subsect end   ] */


/* [wxMaxima: input   start ] */
/*states: */
/* convention: a = [alpha1, alpha2, alpha3] = 2* dq_2:4/dq1, with dq1 = 1 [2](eq. 21d, 35) and [5] */  
declare(Omega, nonscalar);
/* Omega: matrix([Omega11, Omega12, Omega13],[Omega21, Omega22, Omega23],[Omega31, Omega32, Omega33]); */
v: matrix([v_x],[v_y],[v_z]);
scalefactors([a0, a1, a2, b_w_phi, b_w_theta, b_w_psi]);
q_dot: 1/2*q_mult(q,p3toquat(w_m-b_w));
/* x_dot = F x + eta_x */
/* source: [5], eq. 61 with reduced states */
G_lin: matrix()$
G_lin: addcol(G_lin,-cross_mat(w_m-b_w),  -ident(3))$
G_lin: addrow(G_lin,addcol(zeromatrix(3,3), zeromatrix(3,3)));

/* y = H x + eta_y */
/* y = [a ; m] : delta of acceleration, delta of magnetometer */ /* in [5] is written, that delta y is used (for me it makes no sense, in [2] they use also only y and not delta y) */
q_hat: transpose(matrix([q0_hat, q1_hat, q2_hat, q3_hat]))$

a: matrix([a0],[a1],[a2])$
/* (ident(3)-cross_mat(a)).Re_to_b(q_hat) - source: [5] eq. 37 */
y_acc: (ident(3)-cross_mat(a)).Re_to_b(q_hat).G +cross_mat(w_m-b_w).v$ /* last part is the centripetal acceleration*/
y_mag: (ident(3)-cross_mat(a)).Re_to_b(q_hat).B$
y_hat: addrow(y_acc, y_mag);
gdf: grad(y_hat)$
gdf: express(gdf)$
H_lin: ev(gdf, diff)$ /* ev evaluates the derivations */
temp: matrix()$
for deriv in H_lin do
    temp: addcol(temp, deriv)$
H_lin: temp;
kill(temp);

/* old H_lin */
/*H: addrow(addcol(cross_mat(Re_to_b(q_hat).G), zeromatrix(3,3)),
                addcol(cross_mat(Re_to_b(q_hat).B), zeromatrix(3,3)))*/$
/* [wxMaxima: input   end   ] */


/* [wxMaxima: subsubsect start ]
Evaluation
   [wxMaxima: subsubsect end   ] */


/* [wxMaxima: input   start ] */
/* With this parameters, the centripetalacceleration should direct into positive y direction, because we rotate in mathematically positive direction */
parameters: [delta_i =0, delta_d=0, g_mps2=9.81, +
                    v_y =0, v_z=0, q0_hat=1, q1_hat=0, q2_hat=0, q3_hat=0, 
                    a0=0, a1=0, a2=0,
                    w_phi_m=1, w_theta_m=1, w_psi_m=2, 
                    b_w_phi=1, b_w_theta=1, b_w_psi=1];
y_hat_ev: ev(y_hat, parameters);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: subsect start ]
Measurement matrix (Use magnetometer only for yaw angle estimation)
   [wxMaxima: subsect end   ] */
/* [wxMaxima: fold    start ] */
/* [wxMaxima: comment start ]
This is due to the bad measurements of the magnetometer
   [wxMaxima: comment end   ] */

/* [wxMaxima: subsubsect start ]
y_hat calculated seperat for magnetometer and accelerometer
   [wxMaxima: subsubsect end   ] */

/* [wxMaxima: input   start ] */
scalefactors([a0, a1, a2, b_w_phi, b_w_theta, b_w_psi]);

y_acc: (ident(3)-cross_mat(a)).Re_to_b(q_hat).G +cross_mat(w_m-b_w).v; /* last part is the centripetal acceleration*/
qAlpha: transpose(matrix([2, a0, a1, a2]));
q_hat_temp: q_mult_maley(q_hat, qAlpha);
q_hat_temp: q_hat_temp/(sqrt(q_hat_temp[1][1]^2+q_hat_temp[2][1]^2+q_hat_temp[3][1]^2+q_hat_temp[4][1]^2)); /* norm! */
rotMat: Re_to_b(q_hat_temp);
y_mag: atan2(rotMat[1][2], rotMat[1][1]); /* see Matlab, Quaternion.quat2Euler() (3. row for psi) */

/* calculate H_lin for the accelerometer */
gdf: grad(y_acc)$
gdf: express(gdf)$
H_lin: ev(gdf, diff)$ /* ev evaluates the derivations */
temp: matrix()$
for deriv in H_lin do  /* must be done, because H_lin is a matrix of matrices. Create one matrix */
    temp: addcol(temp, deriv)$
H_lin_acc: temp;
kill(temp);

/* calculate psi from the magnetometer measurements */
acc: Re_to_b(q_hat).G;
ax: acc[1][1]$
ay: acc[2][1]$
az: acc[3][1]$
phi_mag: '(atan2(ay,az));
theta_mag: '(real(asin(-ax/g_mps2)));
/* mx, my, mz are the values after applying inclination and declination! */
Xh:'(cos(theta_mag)*mx + sin(phi_mag)*sin(theta_mag)*my + cos(phi_mag)*sin(theta_mag)*mz);
Yh: '(sin(phi_mag)*mz - cos(phi_mag)*my);
psi: '(atan2(Yh, Xh));

/* calculating H_lin for the magnetometer */
gdf: grad(y_mag)$
gdf: express(gdf)$
/* why there is no atan2 in H_lin_mag? */
H_lin_mag: ev(gdf, diff); /* ev evaluates the derivations */
/* [wxMaxima: input   end   ] */


/* [wxMaxima: fold    end   ] */


/* [wxMaxima: subsect start ]
INS MEKF
   [wxMaxima: subsect end   ] */


/* [wxMaxima: comment start ]
Instead of estimating only the attitude, estimate also the position and the velocity
   [wxMaxima: comment end   ] */


/* [wxMaxima: comment start ]
States are:
    - error attitude alpha
    - position
    - velocity
    - gyrobias
Measurements are:
    - magnetometer
    - height (baro)
    - position gps
    - position line
    - velocity gps
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
a: [a0, a1, a2]$
position: [px, py, pz]$
velocity: [vx, vy, vz]$
b_w: [b_w_phi, b_w_theta, b_w_psi]$
x: append(a, position, velocity, b_w);
scalefactors(x);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: subsubsect start ]
System- and measurement equations
   [wxMaxima: subsubsect end   ] */


/* [wxMaxima: input   start ] */
a_b: matrix([a_bx],[a_by],[a_bz])$ /* measured acceleration */
a: transpose(matrix(a)); /* create matrix form of list */

a_dot: -cross_mat(w_m-b_w).a - b_w$
position_dot: transpose(matrix(velocity))$
velocity_dot: ev(Rb_to_e, q_0 = q0_hat, q_1 = q1_hat, q_2 = q2_hat, q_3 = q3_hat).(ident(3)+cross_mat(a)).a_b + matrix([0],[0],[-g_mps2])$ /* approximation from [5], eq. 38*/
b_w_dot: matrix([0],[0],[0])$

/* system equation */
x_dot: addrow(a_dot, position_dot, velocity_dot, b_w_dot);
/* A_lin: ersten 3 zeilen schauen anders aus als oben! warum ist a nochmals von b_w abhängig? */
gdf: grad(x_dot)$
gdf: express(gdf)$
A_lin: ev(gdf, diff)$ /* ev evaluates the derivations */
temp: matrix()$
for deriv in A_lin do  /* must be done, because H_lin is a matrix of matrices. Create one matrix */
    temp: addcol(temp, deriv)$
A_lin: temp;
kill(temp)$

/* measurement equations */
m_b: (ident(3)-cross_mat(a)).Re_to_b(q_hat).B$
Pz_baro: matrix([pz])$
P_gps: transpose(matrix(position))$
P_line: transpose(matrix(position))$
V_gps: transpose(matrix(velocity))$
y_hat: addrow(m_b, Pz_baro, P_gps, P_line, V_gps);

gdf: grad(y_hat)$
gdf: express(gdf)$
H_lin: ev(gdf, diff)$ /* ev evaluates the derivations */
temp: matrix()$
for deriv in H_lin do  /* must be done, because H_lin is a matrix of matrices. Create one matrix */
    temp: addcol(temp, deriv)$
H_lin: temp;
kill(temp)$
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */

/* [wxMaxima: input   end   ] */


/* [wxMaxima: heading5 start ]
Evaluation
   [wxMaxima: heading5 end   ] */


/* [wxMaxima: input   start ] */
/* should be on all three components zero */
ev(velocity_dot, q0_hat=0.707106781186548, q1_hat = 0.707106781186548, q2_hat = 0, q3_hat=0, a0=0, a1=0, a2=0, a_bx =0, a_by = g_mps2, a_bz = 0);
/* [wxMaxima: input   end   ] */



/* Old versions of Maxima abort on loading files that end in a comment. */
"Created with wxMaxima 19.03.1"$
