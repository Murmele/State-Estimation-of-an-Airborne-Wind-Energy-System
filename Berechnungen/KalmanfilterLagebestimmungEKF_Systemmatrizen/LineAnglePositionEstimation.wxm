/* [wxMaxima batch file version 1] [ DO NOT EDIT BY HAND! ]*/
/* [ Created with wxMaxima version 19.05.1-DevelopmentSnapshot ] */
/* [wxMaxima: title   start ]
Position estimation from tether angle (Dynamic model)
   [wxMaxima: title   end   ] */


/* [wxMaxima: comment start ]
Due to the mass of the tether, the tether is not a straight line and so the position calculated from the tether angle is not correct. In this file an approach to estimate the position of the kite from the tether with tether sagging considered is derived 

No friction is considered in the model. Without friction, a single tether part moves periodically. The simulation of two parts does not look anymore right, but maybe it's only because no friction is available which reduces the movement.
   [wxMaxima: comment end   ] */


/* [wxMaxima: comment start ]
Source:
    - [1] Williams2007 - Modeling and control of a kite on a variable length flexible inelastic tether
   [wxMaxima: comment end   ] */


/* [wxMaxima: comment start ]
TODO:
    - include tether drag, because otherwise there is no damper inside
   [wxMaxima: comment end   ] */


/* [wxMaxima: comment start ]
Assumptions:
   [wxMaxima: comment end   ] */


/* [wxMaxima: section start ]
Rotation matrices
   [wxMaxima: section end   ] */


/* [wxMaxima: input   start ] */
R_x(phi):= matrix([1,0,0],[0,cos(phi),sin(phi)],[0,-sin(phi),cos(phi)]);
R_y(theta):= matrix([cos(theta),0,-sin(theta)],[0,1,0],[sin(theta),0,cos(theta)]);
R_z(psi):= matrix([cos(psi),sin(psi),0],[-sin(psi),cos(psi),0],[0,0,1]);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
/*R(theta, phi, l):= matrix([l*sin(theta(t))*sin(phi(t))], [l*sin(theta(t))*cos(phi(t))], [l*cos(theta(t))]);
P_jp1: R(theta_jp1, phi_jp1, l_jp1);
P_jp1_body: R_y(theta_jp1).R_z(phi_jp1).P_jp1;
P_j: R(theta_j, phi_j, l_j) + P_jp1;
r_j: R(theta_j, phi_j, l_j);

r_j_dotdot: diff(r_j, t,2);*/;
/* [wxMaxima: input   end   ] */


/* [wxMaxima: section start ]
Cartesian Acceleration, Spherical Acceleration
   [wxMaxima: section end   ] */


/* [wxMaxima: input   start ] */
/* constant length */
/* komische definition in [1.], eq. 3!!!!!!!!!!!!!!!!!!!!!!!!!!!!*/
/* own definition
rx: l*sin(theta(t))*sin(phi(t))$
ry: l*sin(theta(t))*cos(phi(t))$
rz: l*cos(theta(t))$ */
rx: l(t)*cos(phi(t))*sin(theta(t))$
ry: l(t)*sin(phi(t))$
rz: l(t)*cos(phi(t))*cos(theta(t))$
r: matrix([rx],[ry],[rz]); /* [1], eq.3 */
/* cartesian acceleration to spherical acceleration */
acc: diff(r, t, 2); /* equivalent to [1], eq. 6 */

/* to check if correct */
/*acc_source: matrix( /* [1], eq. 6 
    [diff(l(t), t,2)*cos(phi(t))*sin(theta(t))- 2*diff(l(t),t)*diff(phi(t),t)*sin(phi(t))*sin(theta(t))+2*diff(l(t), t)*diff(theta(t), t)*cos(phi(t))*cos(theta(t))-l(t)*diff(phi(t),t)^2 * cos(phi(t))*sin(theta(t))-l(t)*diff(phi(t),t, 2)*sin(phi(t))*sin(theta(t))-2*l(t)*diff(phi(t),t)*diff(theta(t), t)*sin(phi(t))*cos(theta(t)) - l(t)*diff(theta(t),t)^2*cos(phi(t))*sin(theta(t)) +l(t)*diff(theta(t),t,2)*cos(phi(t))*cos(theta(t))],
    [diff(l(t),t,2)*sin(phi(t))+2*diff(l(t),t)*diff(phi(t),t)*cos(phi(t))-l(t)*diff(phi(t),t)^2*sin(phi(t)) + l(t)*diff(phi(t),t,2)*cos(phi(t))],
    [diff(l(t),t,2)*cos(phi(t))*cos(theta(t))- 2*diff(l(t),t)*diff(phi(t),t)*sin(phi(t))*cos(theta(t))- 2*diff(l(t),t)*diff(theta(t),t)*cos(phi(t))*sin(theta(t))-l(t)*diff(phi(t),t)^2*cos(phi(t))*cos(theta(t)) - l(t)*diff(phi(t),t,2)*sin(phi(t))*cos(theta(t)) + 2*l(t)*diff(theta(t),t)*diff(phi(t),t)*sin(phi(t))*sin(theta(t))- l(t)*diff(theta(t),t)^2*cos(phi(t))*cos(theta(t))-l(t)*diff(theta(t),t,2)*cos(phi(t))*sin(theta(t))])$
test: acc-acc_source;*/
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
Evaluation to check if the equations are correct

it must always depend on 'diff(l(t),t,2), because acc is the acceleration difference between two points, and if the other point do not move, the acceleration must be due to the rope length change
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
/* the acceleration must be the same like the acceleration of the tether lenght change
matrix(
        [0],
        [0],
        ['diff(l(t),t,2)]
    )*/
acc_ev_theta0: ev(acc, g=9.81, m=1, 'diff(theta(t),t)=0, 'diff(theta(t),t,2) = 0, theta(t) = 0, phi(t) = 0);
/* the first point lies on for example (0,0,0), so if the tether is horizontal, the acceleration can only be in the direction of the tether */
acc_ev_thetaPi_2: ev(acc, g=9.81, m=1, 'diff(theta(t),t)=0, 'diff(theta(t),t,2) = 0,theta(t) = %pi/2, phi(t) = 0);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: section start ]
Forces and tensions
   [wxMaxima: section end   ] */


/* [wxMaxima: input   start ] */
r_j: ev(r, phi(t) = phi_j, theta(t) = theta_j, l(t) = l_j); /* [1] eq. 3*/
r_j_dot2: diff(ev(r_j, phi_j = phi_j(t), theta_j = theta_j(t), l_j = l_j(t)), t,2)$ /* [1] eq. 6 */
r_j_dot2: subst(['diff(phi_j(t),t,2) = phi_dot2, 
                        'diff(theta_j(t),t,2) = theta_dot2, 
                        'diff(phi_j(t),t) = phi_dot, 
                        'diff(theta_j(t),t) = theta_dot,
                        'diff(l_j(t),t) = l_dot, /* don't change length --> must be replaced by zero */
                        'diff(l_j(t), t, 2) = l_dot2, /* don't change length --> must be replaced by zero */
                        l_j(t) = l,
                        phi_j(t) = phi,
                        theta_j(t) = theta
                        ], r_j_dot2);
/* Rotate from inertia frame to body frame */
R_i_to_b(theta, phi) := matrix([cos(theta), 0, -sin(theta)],
                                                [-sin(theta)*sin(phi), cos(phi), -cos(theta)*sin(phi)],
                                                [cos(phi)*sin(theta), sin(phi), cos(phi)*cos(theta)]); /* [1], eq. 7 */
R_b_to_i(theta,phi) := transpose(R_i_to_b(theta, phi));

r_j_b_dot2: trigsimp(R_i_to_b(theta, phi).r_j_dot2); /* [1], eq. 8 */
/*r_j_b_dot2_source: matrix([l*theta_dot2*cos(phi) + 2*l_dot*theta_dot*cos(phi) - 2*l*theta_dot*phi_dot*sin(phi)],
                                            [l*phi_dot2+l*theta_dot^2*sin(phi)*cos(phi)+2*l_dot*phi_dot],
                                            [l_dot2-l*cos(phi)^2*theta_dot^2-l*phi_dot^2]);
test: trigsimp(r_j_b_dot2- r_j_b_dot2_source);*/

/* Test: must show in the l direction (3rd component),
because all the movements are in l direction?*/
trigsimp(R_i_to_b(theta_j, phi_j).r_j/l_j);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
;
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
The goal is to estimate the tension of each part.
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
/* [1] eq. 9 */
T(T, theta, phi):= T*transpose(R_i_to_b(theta,phi)[3]); /* 3rd component of the rotation matrix */
/* [1] eq. 10 */
F(Fx, Fy, Fz, T_jm1, T_j):= matrix([Fx], [Fy], [Fz]) + T_jm1 - T_j;

F_j: F(Fx_j, Fy_j, Fz_j, T(T_jm1, theta_jm1, phi_jm1), T(T_j, theta_j, phi_j))$
F_jp1: F(Fx_jp1, Fy_jp1, Fz_jp1, T(T_j, theta_j, phi_j), T(T_jp1, theta_jp1, phi_jp1))$
r_j_dot2_inertiaF: F_j/m_j- F_jp1/m_jp1;
/* [1] eq. 11, 12, 13:  */
r_j_dot2_bodyF: R_i_to_b(theta_j, phi_j).r_j_dot2_inertiaF; /* [1], eq. 4,11-13 in the body frame */
/* [wxMaxima: input   end   ] */


/* [wxMaxima: section start ]
example: only one mass, 2D
   [wxMaxima: section end   ] */


/* [wxMaxima: input   start ] */
external_forces: [Fx_j = 0, Fy_j = 0, Fz_j = -m_j*g]; /* only gravity respected, no drag nor lift of a kite */ 
/*r_1_dot2_body: ev(r_j_dot2_body, T_jm1=0, phi_jm1=0, theta_jm1=0);*/
r_j_dot2_body_evF: ev(r_j_dot2_bodyF, T_jm1=0, phi_jm1=0, theta_jm1=0)$ /* conditions for the first node */

/* Assumption: m_jp1 = inf, because the origin is fixed */
/* so r_1_dot2_body = R_1_dot2_body */
r_j_dot2_body_evF: limit(r_j_dot2_body_evF, m_jp1, inf);

/* do not move in l direction, because the origin is fixed and the tether part is a straight line with defined lenght which doesn't change */
/*r_1_dot2_body_l: r_1_dot2_body[3][1] = 0; /* l component is zero, because origin do not move */
gl: r_j_dot2_body_evF[3][1] = 0;
/*r_j_dot2_body_evF: r_j_dot2_body_evF = R_i_to_b(phi_j, theta_j).ev(acc, phi(t) = phi_j, theta(t) = theta_j); */

/* Calculate tension */
T_1: rhs(solve(gl, T_j)[1])$
T_1: ev(T_1, external_forces);

r_j_dot2_body_evF: trigsimp(ev(r_j_dot2_body_evF, T_j = T_1, external_forces));

r_j_dot2_body2DF: ev(r_j_dot2_body_evF, phi_j=0);

/* Due to the 2D assumption, the y component is always zero */
r_j_dot2_inertiaF2D: R_b_to_i(theta_j, phi_j).r_j_dot2_body2DF;

/* [wxMaxima: input   end   ] */


/* [wxMaxima: subsect start ]
Plot acceleration in 2D to check result
   [wxMaxima: subsect end   ] */


/* [wxMaxima: comment start ]
Assumptions:
- gravity in [g]
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
/* acceleration in x direction must decrease first, because the x axis shows to the left side and we rotate clockwise*/
plot2d([ev(r_j_dot2_inertiaF2D, g=9.81)[1][1],ev(r_j_dot2_inertiaF2D, g=9.81)[3][1]], [theta_j,0,%pi],[legend, "x", "z"],
 [plot_format, gnuplot], [xlabel, "theta [rad]"], [ylabel, "acceleration [m/s^2]"],[title, "x and z component of the acceleration"])$

/*Result: see figure below
- There is no acceleration at theta=0 and pi. The mass is exactly over the fixed point or exactly under the point
- why the x acceleration decreases? (was an error in the definition of the gravity)
    - the x acceleration increases first, because the mass is rotated about the fixed point in clockwise direction (definition of theta)
- at theta=90degree or pi/2~1,5rad the x component is zero and the z component has the value of 9.81m/s^2, 
    because the tether is completely horizontal
- The z acceleration becomes negative first, because the mass is falling down and the positive z-direction is upward
*/


/* [wxMaxima: input   end   ] */


/* [wxMaxima: caption start ]
 the curve must look like this:
   [wxMaxima: caption end   ] */
/* [wxMaxima: image   start ]
png

   [wxMaxima: image   end   ] */


/* [wxMaxima: input   start ] */
gl2D_x: trigsimp(ev(r_j_dot2_inertiaF2D)[1][1] = ev(acc, phi(t) = 0, theta(t) = theta_j,  diff(l(t),t) = 0, diff(l(t),t,2)=0, l(t) = l)[1][1]);
gl2D_y: trigsimp(ev(r_j_dot2_inertiaF2D)[2][1] = ev(acc, phi(t) = 0, theta(t) = theta_j, diff(l(t),t) = 0, diff(l(t),t,2)=0, l(t) = l)[2][1]);
gl2D_z: trigsimp(ev(r_j_dot2_inertiaF2D)[3][1] = ev(acc, phi(t) = 0, theta(t) = theta_j, diff(l(t),t) = 0, diff(l(t),t,2)=0, l(t) = l)[3][1]);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
/* create two nonlinear differential equations of first order */
/*  x_1 = theta
    x_2 = theta_dot */
gl1:'diff(x_1, t) = x_2;
ev(subst(['diff(theta_j,t,2) = 'diff(x_2,t), theta_j = x_1, 'diff(x_1,t) = x_2], gl2D_x), l(t)=l)$
ev(%, l=1, g=9.81)$
gl2: solve(%, 'diff(x_2,t))[1];

x_10: %pi-0.1$ /* [rad] theta */
x_20: 0$ /* [rad/s] theta_dot */
t0: 0$ /* [s] start time*/
tlast: 10$ /* [s] stop time */
dt: 0.1$ /* [s] */

/* if the values becom to high, the solver stops*/
/* result: list of list with the results: first is the time, second= x_1, third = x_2 */
solution: rk([rhs(gl1), rhs(gl2)], [x_1, x_2], [x_10, x_20], [t, t0, tlast, dt])$
plot2d ([discrete,makelist([p[1],p[2]*180/%pi],p,solution)], [xlabel,"t [s]"],[ylabel,"theta [deg]"])$

/* result:
- if x_10 = x_20 = 0, the angle must not change, because it is perfectly vertically
- if x_10 = %pi, x_20 = 0, there is an oszilatting angle change (very small). This is because of 
the accuracy in calculating trigonometric functions. If sin(%pi) is not zero at the beginning, 
there is an initial acceleration and so the angle changes, because no damping(Friction...) is included
 */
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
/* ######################## why cos(x_1) is in the denominator(is it correct?)? #####################;;;;;;;;;;;
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
rkeq;
/* [wxMaxima: input   end   ] */


/* [wxMaxima: section start ]
example: use multiple mass, 2D
   [wxMaxima: section end   ] */


/* [wxMaxima: input   start ] */
twoDimensional: true;
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
nbrElements: 1; /* number of elements */
externalForces(i):= [Fx[i] = 0, Fy[i] = 0, Fz[i] = -m[i]*g];  /* only gravity respected, no drag nor lift of a kite */ 
/* external force for the last element i.e. smalles number, there is the kite connected*/
externalForcesLast(i):= [Fx[i] = 0, Fy[i] = 0, Fz[i] = -m[i]*g+ m[i]*(g+0.1)];  /* only gravity respected, no drag nor lift of a kite */ 

for tetherNumber: 1 thru nbrElements do (
    /* conditions for the rope connected to the kite */
    r_dot2_bodyF: r_j_dot2_bodyF,
    if tetherNumber = 1 then(
        r_dot2_bodyF: ev(r_dot2_bodyF, T_jm1=0, phi_jm1=0, theta_jm1=0),
        F: ev(F, T_jm1=0, phi_jm1=0, theta_jm1=0)/*,
        display("1"),
        display(r_dot2_bodyF)*/
    ),
    /*display("2"),
    display(r_dot2_bodyF),*/
    /* don't evaluate external forces here, because otherwise limit is wrong, because limit(m[2]*g/m[2], m[2], inf) = g and not zero! The acceleration must be zero for the element after the last one
    /*r_dot2_bodyF: ev(r_dot2_bodyF, externalForces_j, externalForces_jp1),*/
    /*F: ev(F, externalForces_j), /* evaluate first, because external Forces contain some variables from below*/
    r_dot2_body_evF[tetherNumber]: ev(r_dot2_bodyF, 
                                        T_jm1 = T[tetherNumber-1],
                                        T_j = T[tetherNumber], 
                                        T_jp1 = T[tetherNumber+1], 
                                        m_jm1 = m[tetherNumber-1],
                                        m_j = m[tetherNumber], 
                                        m_jp1 = m[tetherNumber+1], 
                                        phi_jm1 = phi[tetherNumber-1],
                                        phi_j = phi[tetherNumber], 
                                        phi_jp1 = phi[tetherNumber+1], 
                                        theta_jm1 = phi[tetherNumber-1],
                                        theta_j = theta[tetherNumber], 
                                        theta_jp1 = theta[tetherNumber+1],
                                        Fx_jm1 = Fx[tetherNumber-1],
                                        Fx_j = Fx[tetherNumber],
                                        Fx_jp1 = Fx[tetherNumber+1],
                                        Fy_jm1 = Fy[tetherNumber-1],
                                        Fy_j = Fy[tetherNumber],
                                        Fy_jp1 = Fy[tetherNumber+1],
                                        Fz_jm1 = Fz[tetherNumber-1],
                                        Fz_j = Fz[tetherNumber],
                                        Fz_jp1 = Fz[tetherNumber+1]),
    F_ev[tetherNumber]: ev(F, 
                                        T_jm1 = T[tetherNumber-1],
                                        T_j = T[tetherNumber], 
                                        T_jp1 = T[tetherNumber+1], 
                                        m_jm1 = m[tetherNumber-1],
                                        m_j = m[tetherNumber], 
                                        m_jp1 = m[tetherNumber+1], 
                                        phi_jm1 = phi[tetherNumber-1],
                                        phi_j = phi[tetherNumber], 
                                        phi_jp1 = phi[tetherNumber+1], 
                                        theta_jm1 = phi[tetherNumber-1],
                                        theta_j = theta[tetherNumber], 
                                        theta_jp1 = theta[tetherNumber+1],
                                        Fx_jm1 = Fx[tetherNumber-1],
                                        Fx_j = Fx[tetherNumber],
                                        Fx_jp1 = Fx[tetherNumber+1],
                                        Fy_jm1 = Fy[tetherNumber-1],
                                        Fy_j = Fy[tetherNumber],
                                        Fy_jp1 = Fy[tetherNumber+1],
                                        Fz_jm1 = Fz[tetherNumber-1],
                                        Fz_j = Fz[tetherNumber],
                                        Fz_jp1 = Fz[tetherNumber+1]),
    
    /* Assumption: m_jp1 = inf, for the last tetherElement, because the origin is fixed */
    /* so r_2_dot2_body = R_2_dot2_body */
    if tetherNumber = nbrElements then (
        /* seems not to work in this loop */
        r_dot2_body_evF[tetherNumber]: limit(r_dot2_body_evF[tetherNumber], m[nbrElements+1], inf),
        r_dot2_body_evF[tetherNumber]: ev(r_dot2_body_evF[tetherNumber], externalForcesLast(tetherNumber), 
                                                                                                                     externalForces(tetherNumber+1))
    ) else (
    
        r_dot2_body_evF[tetherNumber]: ev(r_dot2_body_evF[tetherNumber], externalForces(tetherNumber), 
                                                                                                                     externalForces(tetherNumber+1))
   )
)$



/* Assumption: m_jp1 = inf for the last tetherElement, because the origin is fixed */
/* so r_nbrElements_dot2_body = R_nbrElements_dot2_body */
/* don't understand, why this doesn't work in the loop*/
/*display("3");
display(r_dot2_body_evF[nbrElements]);*/
/*r_dot2_body_evF[nbrElements]: limit(r_dot2_body_evF[nbrElements], m[nbrElements+1], inf)$*/
/*display("4");
display(r_dot2_body_evF[nbrElements]);*/

/* ########################### Gauss elimination ##########################*/
/* 1) Forward elimination (Calculating the tensions)*/
tensions: []$/*T[nbrElements] = Teq[nbrElements]]; /* add first tension */
    
for tetherNumber: nbrElements thru 1 step -1 do (

    r_dot2_body_evF[tetherNumber]: trigsimp(ev(r_dot2_body_evF[tetherNumber], tensions)),
    /*display("6"),
    display(r_dot2_body_evF[tetherNumber]),*/
    if twoDimensional = true then (
        r_dot2_body_evF[tetherNumber]: ev(r_dot2_body_evF[tetherNumber], phi[1]=0, phi[2]=0)
    ),
    
    r_j_b_dot2ev: r_j_b_dot2,
    if twoDimensional = true then (
        r_j_b_dot2ev: ev(r_j_b_dot2ev,
                            phi=0,
                            phi_dot = 0,
                            phi_dot2 = 0)
    ) else (
        r_j_b_dot2ev: ev(r_j_b_dot2ev,
                            phi=phi[tetherNumber],
                            phi_dot = phi_dot[tetherNumber],
                            phi_dot2 = phi_dot2[tetherNumber])
    ),
    
     r_j_b_dot2ev: ev(r_j_b_dot2ev,  
                            theta=theta[tetherNumber], 
                            theta_dot = theta_dot[tetherNumber],
                            theta_dot2 = theta_dot2[tetherNumber],
                            l_dot = 0, /* length of the tether element doesn't change */
                            l_dot2 = 0), /* length of the tether element doesn't change */
    eq[tetherNumber]: r_dot2_body_evF[tetherNumber] = r_j_b_dot2ev,
    if tetherNumber = nbrElements then (
        /* do not move in l direction, because the origin is fixed and the tether part is a straight line with defined lenght which doesn't change */
        eq3[tetherNumber]: r_dot2_body_evF[tetherNumber][3][1] = 0
        /*display("5"),
        display(eq3[tetherNumber])*/
    ) else (
        display("called"),
        eq3[tetherNumber]: r_dot2_body_evF[tetherNumber][3][1] = r_j_b_dot2ev[3][1],
        display(eq3[tetherNumber])
    ),
    /* calculate tension */
    Teq[tetherNumber]:trigsimp(rhs(solve(eq3[tetherNumber], T[tetherNumber])[1])),
    tensions: append(tensions, [T[tetherNumber] = Teq[tetherNumber]])
)$
kill(r_j_b_dot2ev)$

/* 2) Inserting backward */
for tetherNumber: 1 thru nbrElements do (
    eq[tetherNumber]: ev(eq[tetherNumber], tensions)
);


/* Due to the 2D assumption, the y component is always zero */


/*r_dot2_inertia2D[1]: R_b_to_i(theta[1], phi[1]).r_dot2_body2D[1];
r_dot2_inertia2D[2]: R_b_to_i(theta[2], phi[2]).r_dot2_body2D[2];

gl2D[1]: trigsimp(ev(r_dot2_inertia2D[1]) = ev(acc, phi(t) = 0, theta(t) = theta[1],  diff(l(t),t) = 0, diff(l(t),t,2)=0, l(t) = l));
gl2D[2]: trigsimp(ev(r_dot2_inertia2D[2]) = ev(acc, phi(t) = 0, theta(t) = theta[2],  diff(l(t),t) = 0, diff(l(t),t,2)=0, l(t) = l));*/
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
counter: 4$ /* phi, phi_dot, theta, theta_dot */
x_list: []$
if twoDimensional then (
        counter: 2
)$

for j: 1 thru counter do (
    x[j]: makelist (concat (x, j, i), i, nbrElements),
    x_list: append(x_list, x[j])
);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
/* rotate back to inertial frame */
for tetherNumber: 1 thru nbrElements do (
    if twoDimensional then (
        eqInertia[tetherNumber]: R_b_to_i(theta[tetherNumber], 0).eq[tetherNumber]
    ) else
        eqInertia[tetherNumber]: R_b_to_i(theta[tetherNumber], phi[tetherNumber]).eq[tetherNumber]
)$
useEq: 1; /* 1: use x component to solve differential equation, but it should work also with the others (---> testing this!!!) */
/* variables which must be substituted */
makelist(theta[i] = x[1][i], i, 1, nbrElements)$
append(%, makelist(theta_dot[i] = x[2][i], i, 1, nbrElements))$
substVariables: append(%, makelist(theta_dot2[i] = 'diff(x[2][i],t), i, 1, nbrElements));

if twoDimensional then (
    /* only one parameter(theta), so only a normal differential equation second order */    
    for tetherNumber: 1 thru nbrElements do (
        gl1[tetherNumber]: 'diff(x[1][tetherNumber], t) = x[2][tetherNumber],
        temp: subst(substVariables,lhs(eqInertia[tetherNumber])[useEq][1] = rhs(eqInertia[tetherNumber])[useEq][1]),
        gl2[tetherNumber]: solve(temp, 'diff(x[2][tetherNumber],t))[1]
    )
) else (
    display("not implemented")
)$
kill(substVariables)$
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
x_110: 0-0.5$ /* [rad] theta_1 */
x_210: 0$ /* [rad/s] theta_dot_1 */
x_120: 0-0.5$ /* [rad] theta_2 */
x_220: 0$ /* [rad/s] theta_dot_2 */
initialValuesAngles: [x_110, x_120]$
initialValuesAngularVelocity: [x_210, x_220]$
initialValues: join(initialValuesAngles, initialValuesAngularVelocity)$
initialValues: firstn(initialValues, 2*nbrElements);

t0: 0$ /* [s] start time*/
tlast: 150$ /* [s] stop time */
dt: 0.01$ /* [s] */

/* set constants */
rkeq: []$
for tetherNumber: 1 thru nbrElements do (
    gl1[tetherNumber]: ev(gl1[tetherNumber], g = 9.81, l = 1, makelist(m[i] = 1, i, 1, nbrElements)),
    gl2[tetherNumber]: ev(gl2[tetherNumber], g = 9.81, l = 1, makelist(m[i] = 1, i, 1, nbrElements)),
    rkeq: append(rkeq, [rhs(gl1[tetherNumber])], [rhs(gl2[tetherNumber])])    
);
/* if the values becom to high, the solver stops*/
/* result: list of list with the results: first is the time, second= x1, third = x2 */
solution: rk(rkeq, x_list, initialValues, [t, t0, tlast, dt])$
plot2d ([discrete,makelist([p[1],p[2]*180/%pi],p,solution)], [xlabel,"t [s]"],[ylabel,"theta [deg]"])$

/* [wxMaxima: input   end   ] */



/* Old versions of Maxima abort on loading files that end in a comment. */
"Created with wxMaxima 19.05.1-DevelopmentSnapshot"$
