classdef AHRSMEKFDifferentSampleTimeMagnetometer2 < AHRSMEKF
    %% Multiplicative EKF AHRS
    % Source: 
    % - [2]: Maley2013  - Multiplicative Quaternion Extended Kalman Filtering for Nonspinning Guided Projectiles
    % - [3]: Markley2003 - Attitude Error Representations for Kalman Filtering
    % - [4]: Patrick Spieler - https://github.com/Murmele/adcs
    % - [5]: Mattia Giurato - https://github.com/Murmele/Attitude_Estimation
    % AHRS in with quaternions
    % Input u: angular velocity in body coords
    % Measurement y: acceleration in body coords, magnetometer measurements
    % y: [acc_x, acc_y, acc_z, m_x, m_y, m_z]';
    % x: - a: rotation error
    %    - b_w: bias
    %
    %
    % Difference to the AHRSMEKFDifferentSampleTimeMagnetometer:
    % - Don't change alway size of the R Matrix (checking if it has an
    % impact on the Kalman Gain
    % y_hat and H_lin where calculated with the assumption, that y_hat-y
    % from the second sensor is zero
    
    %Questions:
    % - wird nicht auf phi und theta instabil wenn magnetometer weg fÃ¤llt.
    % Warum der normale "AHRSMEKFDifferentSampleTime" schon?
    % - Simulink. "The selected file
    % 'AHRSMEKFDifferentSampleTimeMagnetometer2' is not a valid System object."
    % why it is not possible to derive from AHRSMEKF, which is a
    % real matlab.system; Solution: The properties already exist in the
    % superclass
    % - The error is 'Property 'EKF.K' is undefined on some execution paths but is used inside the called function.'
    % -- Initialize EKF.K so that it is no uninitialized!
    
    % These variables must be initialized in the simulink model
    % They already exist in AHRSMEKF, so anymore needed here!!
%     properties
%         sigma_2_w;
%         sigma_2_a;
%         sigma_2_b_w;
%         sigma_2_yaw;
%         sampleTime;
%         delta_i;
%         delta_d;
%         g_mps2;
%     end
    
    properties(Access = protected) % These variables must be initialised. Here or in the setupImpl function
    end
    
    methods (Access=protected)
        function resetImpl(obj)
        end
        
        %% Common functions
        function setupImpl(obj)
            % Perform one-time calculations, such as computing constants
            setupImpl@AHRSMEKF(obj);
            obj.EKF.K = ones(length(obj.EKF.x), 4); % must be initalized for code generation with the correct size
        end
        
        function attitude = stepImpl(obj,u, y, acc_available, mag_available)
            % Implement algorithm.
            obj.performEKF(u, y, acc_available, mag_available);
            q_hat = obj.attitude();
            q = Quaternion(q_hat);
            gamma_i_ahrsQuaternion = rad2deg(q.quatToEuler());
            attitude = gamma_i_ahrsQuaternion;
        end
    end
    
    methods
        
        % Constructor must be empty for matlab.System. In Matlab call
        % initFilter after the object was created. In simulink setupImpl()
        % will be called
        function obj = AHRSMEKFDifferentSampleTimeMagnetometer2()
            obj = obj@AHRSMEKF();
        end
        
        function initFilter(obj, sampleTime, delta_i, delta_d, g_mps2, q0, b_w0, P0, sigma_2_w, sigma_2_a, sigma_2_b_w, sigma_2_yaw)
            initFilter@AHRSMEKF(obj, sampleTime, delta_i, delta_d, g_mps2, q0, b_w0, P0, sigma_2_w, sigma_2_a, sigma_2_b_w, sigma_2_yaw);
        end
        
        % estimate states
        function K = performEKF(obj, u, y, acc_available, mag_available)
            
            y(1:3) = y(1:3) * obj.g_mps2; % [g] --> [m/s^2]

            % interpolate obj.q from gyro
            adcs = 0;
            euler = 0;
            if ~adcs
                euler = 0;
                if euler
                    % derivation see EKFQuaternion.wxm
                    q_dot = obj.q_dot_f(u);    
                    obj.q = obj.q + q_dot * obj.sampleTime; % estimate the new attitude
                    obj.q = obj.q / norm(obj.q); % normalize quaternion

                    b_w_dot = [0; 0; 0]; % always zero
                    obj.b_w = obj.b_w + b_w_dot * obj.sampleTime;
                else
                    gyro = u(1:3);
                    % [2], eq. 14
                    gyro_mean = (obj.gyro + gyro - obj.b_w)./2;

                    % [2], eq. 12
                    Omega = [0, -gyro_mean';
                             gyro_mean,      - obj.crossproductMatrix(gyro_mean)];
                    % [2], eq. 13     
                    obj.q = expm(1/2 * Omega * obj.sampleTime) * obj.q;
                    % needed to calculate integral of q_dot
                    obj.gyro = gyro - obj.b_w;
                end
            
            else
                % used from [4] 
                % MEKF3DGyro.m entnommen ( works same as the above approach)
                gyro = u(1:3);
                omega = gyro - obj.EKF.x(4:6); % omega_hat
                ang = norm(omega) * obj.sampleTime;
                if ang > 0.000001
                    axis = omega / norm(omega);
                    delta_q_ref = [cos(ang/2); axis*sin(ang/2)];  % where this eq. come from?
                else
                    delta_q_ref = [1; omega*obj.sampleTime/2];
                end
                q = Quaternion(obj.q);
                obj.q = q.mult(delta_q_ref);
            end
            
            [x_dot, G_lin] = obj.x_dot_and_G_lin(obj.EKF.x, u);
            obj.EKF.predictorStep(x_dot, G_lin);
            
            % wieso muss hier der reset gemacht werden?
            % Problem ist, dass dadurch, dass Beta nicht resetet wird, dies
            % delta a ungleich null setzt.
            % predicted state of the attitude error is zero.
            obj.EKF.x = obj.EKF.x.*[0;0;0;1;1;1]; % reset [2]: eq. 92
                  
            available = [acc_available*ones(3,1); mag_available];
                [y_hat, H_lin, y_meas] = obj.y_hat_and_H_lin(obj.EKF.x, u, y, available);
                obj.EKF.correctorStep(y_meas, y_hat, H_lin);
            obj.updateAttitude();
            % Wieso nicht hier den reset machen, sondern weiter oben?
            %obj.EKF.x = obj.EKF.x .* 0; % reset; this is wrong. works only, when all states are errors
            %obj.EKF.x = obj.EKF.x.*[0;0;0;1;1;1]; %reset only alpha
            
            K = obj.EKF.K;
        end

        % y_htt and H_lin were calculated in maxima:
        % "KalmanfilterLagebestimmungEKF_Systemmatrizen/Quaternionen.wxm"
        % Chapter: Standard Multiplicative Extended Kalman Filter
        function [y_hat, H_lin, y] = y_hat_and_H_lin(obj, x, u, y, available)
            nr = 0;
            if nr == 0
                % accelerometer
                q0_hat = obj.q(1);
                q1_hat = obj.q(2);
                q2_hat = obj.q(3);
                q3_hat = obj.q(4);
                g_mps2 = obj.g_mps2;
                a0 = x(1);
                a1 = x(2);
                a2 = x(3);
                b_w_phi = x(4); % bias
                b_w_theta = x(5);
                b_w_psi = x(6);
                v_x = sqrt(u(4)^2+u(5)^2);
                v_y = 0;
                v_z = 0;
                w_phi_m= u(1);
                w_theta_m = u(2);
                w_psi_m = u(3);

                H_lin =  [0,	-g_mps2*(1-2*(q2_hat^2+q1_hat^2)),	2*g_mps2*(q2_hat*q3_hat+q0_hat*q1_hat),	0,	-v_z,	v_y;
                            g_mps2*(1-2*(q2_hat^2+q1_hat^2)),	0,	-2*g_mps2*(q1_hat*q3_hat-q0_hat*q2_hat),	v_z,	0,	-v_x;
                            -2*g_mps2*(q2_hat*q3_hat+q0_hat*q1_hat),	2*g_mps2*(q1_hat*q3_hat-q0_hat*q2_hat),	0,	-v_y,	v_x,	0;
                          (2*(-(q2_hat*(-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat))/((-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat)^2+(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat)^2+(a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)^2+(2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)^2)+(q3_hat*(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat))/((-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat)^2+(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat)^2+(a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)^2+(2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)^2)+(q0_hat*(a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat))/((-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat)^2+(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat)^2+(a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)^2+(2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)^2)-(q1_hat*(2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat))/((-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat)^2+(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat)^2+(a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)^2+(2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)^2)-((2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)*(-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat)*(-2*q1_hat*(-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat)+2*q0_hat*(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat)+2*q3_hat*(a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)-2*q2_hat*(2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)))/(((-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat)^2+(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat)^2+(a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)^2+(2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)^2)^(2))-((a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)*(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat)*(-2*q1_hat*(-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat)+2*q0_hat*(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat)+2*q3_hat*(a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)-2*q2_hat*(2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)))/(((-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat)^2+(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat)^2+(a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)^2+(2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)^2)^(2)))*(1-2*(((a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)^2)/((-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat)^2+(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat)^2+(a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)^2+(2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)^2)+((2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)^2)/((-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat)^2+(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat)^2+(a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)^2+(2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)^2))))/((1-2*(((a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)^2)/((-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat)^2+(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat)^2+(a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)^2+(2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)^2)+((2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)^2)/((-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat)^2+(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat)^2+(a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)^2+(2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)^2)))^(2)+4*(((2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)*(-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat))/((-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat)^2+(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat)^2+(a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)^2+(2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)^2)+((a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)*(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat))/((-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat)^2+(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat)^2+(a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)^2+(2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)^2))^(2))+(4*((2*q3_hat*(a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat))/((-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat)^2+(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat)^2+(a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)^2+(2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)^2)-(2*q2_hat*(2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat))/((-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat)^2+(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat)^2+(a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)^2+(2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)^2)-((a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)^2*(-2*q1_hat*(-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat)+2*q0_hat*(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat)+2*q3_hat*(a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)-2*q2_hat*(2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)))/(((-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat)^2+(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat)^2+(a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)^2+(2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)^2)^(2))-((2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)^2*(-2*q1_hat*(-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat)+2*q0_hat*(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat)+2*q3_hat*(a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)-2*q2_hat*(2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)))/(((-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat)^2+(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat)^2+(a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)^2+(2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)^2)^(2)))*(((2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)*(-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat))/((-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat)^2+(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat)^2+(a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)^2+(2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)^2)+((a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)*(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat))/((-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat)^2+(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat)^2+(a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)^2+(2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)^2)))/((1-2*(((a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)^2)/((-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat)^2+(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat)^2+(a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)^2+(2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)^2)+((2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)^2)/((-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat)^2+(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat)^2+(a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)^2+(2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)^2)))^(2)+4*(((2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)*(-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat))/((-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat)^2+(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat)^2+(a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)^2+(2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)^2)+((a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)*(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat))/((-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat)^2+(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat)^2+(a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)^2+(2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)^2))^(2)),(2*((q1_hat*(-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat))/((-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat)^2+(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat)^2+(a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)^2+(2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)^2)+(q0_hat*(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat))/((-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat)^2+(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat)^2+(a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)^2+(2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)^2)-(q3_hat*(a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat))/((-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat)^2+(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat)^2+(a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)^2+(2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)^2)-(q2_hat*(2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat))/((-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat)^2+(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat)^2+(a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)^2+(2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)^2)-((2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)*(-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat)*(-2*q2_hat*(-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat)-2*q3_hat*(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat)+2*q0_hat*(a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)+2*q1_hat*(2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)))/(((-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat)^2+(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat)^2+(a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)^2+(2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)^2)^(2))-((a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)*(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat)*(-2*q2_hat*(-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat)-2*q3_hat*(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat)+2*q0_hat*(a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)+2*q1_hat*(2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)))/(((-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat)^2+(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat)^2+(a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)^2+(2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)^2)^(2)))*(1-2*(((a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)^2)/((-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat)^2+(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat)^2+(a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)^2+(2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)^2)+((2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)^2)/((-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat)^2+(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat)^2+(a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)^2+(2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)^2))))/((1-2*(((a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)^2)/((-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat)^2+(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat)^2+(a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)^2+(2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)^2)+((2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)^2)/((-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat)^2+(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat)^2+(a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)^2+(2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)^2)))^(2)+4*(((2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)*(-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat))/((-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat)^2+(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat)^2+(a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)^2+(2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)^2)+((a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)*(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat))/((-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat)^2+(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat)^2+(a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)^2+(2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)^2))^(2))+(4*((2*q0_hat*(a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat))/((-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat)^2+(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat)^2+(a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)^2+(2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)^2)+(2*q1_hat*(2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat))/((-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat)^2+(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat)^2+(a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)^2+(2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)^2)-((a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)^2*(-2*q2_hat*(-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat)-2*q3_hat*(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat)+2*q0_hat*(a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)+2*q1_hat*(2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)))/(((-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat)^2+(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat)^2+(a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)^2+(2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)^2)^(2))-((2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)^2*(-2*q2_hat*(-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat)-2*q3_hat*(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat)+2*q0_hat*(a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)+2*q1_hat*(2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)))/(((-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat)^2+(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat)^2+(a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)^2+(2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)^2)^(2)))*(((2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)*(-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat))/((-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat)^2+(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat)^2+(a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)^2+(2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)^2)+((a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)*(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat))/((-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat)^2+(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat)^2+(a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)^2+(2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)^2)))/((1-2*(((a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)^2)/((-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat)^2+(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat)^2+(a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)^2+(2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)^2)+((2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)^2)/((-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat)^2+(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat)^2+(a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)^2+(2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)^2)))^(2)+4*(((2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)*(-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat))/((-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat)^2+(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat)^2+(a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)^2+(2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)^2)+((a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)*(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat))/((-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat)^2+(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat)^2+(a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)^2+(2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)^2))^(2)),(2*((q0_hat*(-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat))/((-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat)^2+(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat)^2+(a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)^2+(2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)^2)-(q1_hat*(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat))/((-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat)^2+(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat)^2+(a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)^2+(2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)^2)+(q2_hat*(a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat))/((-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat)^2+(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat)^2+(a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)^2+(2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)^2)-(q3_hat*(2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat))/((-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat)^2+(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat)^2+(a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)^2+(2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)^2)-((2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)*(-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat)*(-2*q3_hat*(-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat)+2*q2_hat*(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat)-2*q1_hat*(a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)+2*q0_hat*(2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)))/(((-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat)^2+(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat)^2+(a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)^2+(2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)^2)^(2))-((a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)*(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat)*(-2*q3_hat*(-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat)+2*q2_hat*(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat)-2*q1_hat*(a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)+2*q0_hat*(2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)))/(((-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat)^2+(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat)^2+(a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)^2+(2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)^2)^(2)))*(1-2*(((a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)^2)/((-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat)^2+(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat)^2+(a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)^2+(2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)^2)+((2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)^2)/((-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat)^2+(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat)^2+(a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)^2+(2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)^2))))/((1-2*(((a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)^2)/((-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat)^2+(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat)^2+(a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)^2+(2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)^2)+((2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)^2)/((-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat)^2+(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat)^2+(a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)^2+(2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)^2)))^(2)+4*(((2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)*(-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat))/((-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat)^2+(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat)^2+(a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)^2+(2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)^2)+((a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)*(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat))/((-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat)^2+(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat)^2+(a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)^2+(2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)^2))^(2))+(4*(-(2*q1_hat*(a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat))/((-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat)^2+(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat)^2+(a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)^2+(2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)^2)+(2*q0_hat*(2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat))/((-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat)^2+(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat)^2+(a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)^2+(2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)^2)-((a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)^2*(-2*q3_hat*(-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat)+2*q2_hat*(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat)-2*q1_hat*(a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)+2*q0_hat*(2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)))/(((-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat)^2+(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat)^2+(a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)^2+(2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)^2)^(2))-((2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)^2*(-2*q3_hat*(-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat)+2*q2_hat*(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat)-2*q1_hat*(a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)+2*q0_hat*(2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)))/(((-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat)^2+(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat)^2+(a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)^2+(2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)^2)^(2)))*(((2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)*(-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat))/((-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat)^2+(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat)^2+(a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)^2+(2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)^2)+((a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)*(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat))/((-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat)^2+(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat)^2+(a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)^2+(2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)^2)))/((1-2*(((a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)^2)/((-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat)^2+(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat)^2+(a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)^2+(2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)^2)+((2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)^2)/((-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat)^2+(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat)^2+(a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)^2+(2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)^2)))^(2)+4*(((2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)*(-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat))/((-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat)^2+(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat)^2+(a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)^2+(2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)^2)+((a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)*(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat))/((-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat)^2+(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat)^2+(a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)^2+(2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)^2))^(2)),0,0,0];

                y_hat = [v_z*(w_theta_m-b_w_theta)+v_y*(b_w_psi-w_psi_m)+2*a2*g_mps2*(q2_hat*q3_hat+q0_hat*q1_hat)+2*g_mps2*(q1_hat*q3_hat-q0_hat*q2_hat)-a1*g_mps2*(1-2*(q2_hat^2+q1_hat^2));
                        v_x*(w_psi_m-b_w_psi)+v_z*(b_w_phi-w_phi_m)+2*g_mps2*(q2_hat*q3_hat+q0_hat*q1_hat)-2*a2*g_mps2*(q1_hat*q3_hat-q0_hat*q2_hat)+a0*g_mps2*(1-2*(q2_hat^2+q1_hat^2));
                        v_x*(b_w_theta-w_theta_m)+v_y*(w_phi_m-b_w_phi)-2*a0*g_mps2*(q2_hat*q3_hat+q0_hat*q1_hat)+2*a1*g_mps2*(q1_hat*q3_hat-q0_hat*q2_hat)+g_mps2*(1-2*(q2_hat^2+q1_hat^2));
                        atan2(2*(((2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)*(-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat))/((-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat)^2+(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat)^2+(a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)^2+(2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)^2)+((a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)*(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat))/((-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat)^2+(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat)^2+(a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)^2+(2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)^2)),1-2*(((a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)^2)/((-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat)^2+(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat)^2+(a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)^2+(2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)^2)+((2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)^2)/((-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat)^2+(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat)^2+(a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)^2+(2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)^2)))];
                    %y_hat = [y_hat; ]; % set magnetometer output to zero
                
                acc_hat = y(1:3);
                mag = y(4:6);
                [~, ~, psi] = calculateEulerAnglesFromAccelerometerAndMagnetometer(acc_hat, mag, obj.delta_d, obj.delta_i);
                y = y(1:4);
                y(4) = deg2rad(psi);
                
                y_hat(~available) = 0;
                y(~available) = 0; 
                obj.EKF.R_k = obj.R(1:4, 1:4) / obj.sampleTime; % because only yaw is used
            else
                % magnetometer
                q0_hat = obj.q(1);
                q1_hat = obj.q(2);
                q2_hat = obj.q(3);
                q3_hat = obj.q(4);
                a0 = x(1);
                a1 = x(2);
                a2 = x(3);
                v_x = sqrt(u(4)^2+u(5)^2);
                v_y = 0;
                v_z = 0;
                g_mps2 = obj.g_mps2;
                
                % estimate acc_hat to calculate psi
%                 acc_hat = [2*g_mps2*(q1_hat*q3_hat-q0_hat*q2_hat);
%                             2*g_mps2*(q2_hat*q3_hat+q0_hat*q1_hat);
%                             g_mps2*(1-2*(q2_hat^2+q1_hat^2))];
                % filter is at the beginning unstable, when using acc_hat
                % estimated from the actual angle
                acc_hat = y(1:3);
                mag = y(4:6);
                
                y = [zeros(3,1); deg2rad(psi)]; % set accelerometer to zero
                
                 H_lin =  [0,	-g_mps2*(1-2*(q2_hat^2+q1_hat^2)),	2*g_mps2*(q2_hat*q3_hat+q0_hat*q1_hat),	0,	-v_z,	v_y;
                            g_mps2*(1-2*(q2_hat^2+q1_hat^2)),	0,	-2*g_mps2*(q1_hat*q3_hat-q0_hat*q2_hat),	v_z,	0,	-v_x;
                            -2*g_mps2*(q2_hat*q3_hat+q0_hat*q1_hat),	2*g_mps2*(q1_hat*q3_hat-q0_hat*q2_hat),	0,	-v_y,	v_x,	0;
                          (2*(-(q2_hat*(-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat))/((-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat)^2+(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat)^2+(a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)^2+(2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)^2)+(q3_hat*(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat))/((-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat)^2+(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat)^2+(a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)^2+(2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)^2)+(q0_hat*(a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat))/((-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat)^2+(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat)^2+(a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)^2+(2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)^2)-(q1_hat*(2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat))/((-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat)^2+(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat)^2+(a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)^2+(2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)^2)-((2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)*(-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat)*(-2*q1_hat*(-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat)+2*q0_hat*(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat)+2*q3_hat*(a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)-2*q2_hat*(2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)))/(((-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat)^2+(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat)^2+(a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)^2+(2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)^2)^(2))-((a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)*(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat)*(-2*q1_hat*(-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat)+2*q0_hat*(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat)+2*q3_hat*(a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)-2*q2_hat*(2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)))/(((-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat)^2+(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat)^2+(a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)^2+(2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)^2)^(2)))*(1-2*(((a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)^2)/((-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat)^2+(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat)^2+(a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)^2+(2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)^2)+((2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)^2)/((-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat)^2+(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat)^2+(a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)^2+(2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)^2))))/((1-2*(((a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)^2)/((-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat)^2+(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat)^2+(a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)^2+(2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)^2)+((2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)^2)/((-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat)^2+(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat)^2+(a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)^2+(2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)^2)))^(2)+4*(((2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)*(-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat))/((-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat)^2+(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat)^2+(a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)^2+(2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)^2)+((a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)*(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat))/((-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat)^2+(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat)^2+(a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)^2+(2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)^2))^(2))+(4*((2*q3_hat*(a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat))/((-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat)^2+(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat)^2+(a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)^2+(2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)^2)-(2*q2_hat*(2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat))/((-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat)^2+(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat)^2+(a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)^2+(2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)^2)-((a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)^2*(-2*q1_hat*(-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat)+2*q0_hat*(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat)+2*q3_hat*(a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)-2*q2_hat*(2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)))/(((-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat)^2+(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat)^2+(a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)^2+(2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)^2)^(2))-((2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)^2*(-2*q1_hat*(-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat)+2*q0_hat*(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat)+2*q3_hat*(a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)-2*q2_hat*(2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)))/(((-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat)^2+(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat)^2+(a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)^2+(2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)^2)^(2)))*(((2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)*(-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat))/((-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat)^2+(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat)^2+(a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)^2+(2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)^2)+((a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)*(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat))/((-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat)^2+(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat)^2+(a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)^2+(2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)^2)))/((1-2*(((a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)^2)/((-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat)^2+(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat)^2+(a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)^2+(2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)^2)+((2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)^2)/((-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat)^2+(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat)^2+(a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)^2+(2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)^2)))^(2)+4*(((2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)*(-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat))/((-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat)^2+(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat)^2+(a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)^2+(2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)^2)+((a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)*(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat))/((-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat)^2+(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat)^2+(a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)^2+(2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)^2))^(2)),(2*((q1_hat*(-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat))/((-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat)^2+(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat)^2+(a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)^2+(2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)^2)+(q0_hat*(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat))/((-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat)^2+(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat)^2+(a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)^2+(2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)^2)-(q3_hat*(a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat))/((-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat)^2+(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat)^2+(a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)^2+(2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)^2)-(q2_hat*(2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat))/((-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat)^2+(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat)^2+(a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)^2+(2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)^2)-((2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)*(-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat)*(-2*q2_hat*(-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat)-2*q3_hat*(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat)+2*q0_hat*(a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)+2*q1_hat*(2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)))/(((-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat)^2+(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat)^2+(a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)^2+(2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)^2)^(2))-((a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)*(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat)*(-2*q2_hat*(-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat)-2*q3_hat*(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat)+2*q0_hat*(a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)+2*q1_hat*(2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)))/(((-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat)^2+(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat)^2+(a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)^2+(2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)^2)^(2)))*(1-2*(((a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)^2)/((-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat)^2+(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat)^2+(a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)^2+(2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)^2)+((2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)^2)/((-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat)^2+(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat)^2+(a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)^2+(2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)^2))))/((1-2*(((a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)^2)/((-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat)^2+(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat)^2+(a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)^2+(2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)^2)+((2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)^2)/((-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat)^2+(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat)^2+(a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)^2+(2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)^2)))^(2)+4*(((2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)*(-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat))/((-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat)^2+(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat)^2+(a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)^2+(2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)^2)+((a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)*(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat))/((-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat)^2+(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat)^2+(a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)^2+(2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)^2))^(2))+(4*((2*q0_hat*(a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat))/((-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat)^2+(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat)^2+(a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)^2+(2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)^2)+(2*q1_hat*(2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat))/((-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat)^2+(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat)^2+(a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)^2+(2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)^2)-((a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)^2*(-2*q2_hat*(-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat)-2*q3_hat*(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat)+2*q0_hat*(a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)+2*q1_hat*(2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)))/(((-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat)^2+(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat)^2+(a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)^2+(2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)^2)^(2))-((2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)^2*(-2*q2_hat*(-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat)-2*q3_hat*(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat)+2*q0_hat*(a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)+2*q1_hat*(2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)))/(((-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat)^2+(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat)^2+(a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)^2+(2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)^2)^(2)))*(((2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)*(-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat))/((-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat)^2+(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat)^2+(a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)^2+(2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)^2)+((a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)*(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat))/((-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat)^2+(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat)^2+(a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)^2+(2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)^2)))/((1-2*(((a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)^2)/((-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat)^2+(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat)^2+(a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)^2+(2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)^2)+((2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)^2)/((-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat)^2+(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat)^2+(a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)^2+(2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)^2)))^(2)+4*(((2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)*(-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat))/((-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat)^2+(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat)^2+(a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)^2+(2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)^2)+((a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)*(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat))/((-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat)^2+(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat)^2+(a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)^2+(2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)^2))^(2)),(2*((q0_hat*(-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat))/((-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat)^2+(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat)^2+(a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)^2+(2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)^2)-(q1_hat*(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat))/((-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat)^2+(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat)^2+(a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)^2+(2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)^2)+(q2_hat*(a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat))/((-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat)^2+(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat)^2+(a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)^2+(2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)^2)-(q3_hat*(2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat))/((-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat)^2+(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat)^2+(a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)^2+(2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)^2)-((2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)*(-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat)*(-2*q3_hat*(-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat)+2*q2_hat*(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat)-2*q1_hat*(a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)+2*q0_hat*(2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)))/(((-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat)^2+(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat)^2+(a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)^2+(2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)^2)^(2))-((a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)*(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat)*(-2*q3_hat*(-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat)+2*q2_hat*(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat)-2*q1_hat*(a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)+2*q0_hat*(2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)))/(((-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat)^2+(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat)^2+(a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)^2+(2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)^2)^(2)))*(1-2*(((a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)^2)/((-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat)^2+(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat)^2+(a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)^2+(2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)^2)+((2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)^2)/((-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat)^2+(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat)^2+(a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)^2+(2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)^2))))/((1-2*(((a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)^2)/((-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat)^2+(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat)^2+(a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)^2+(2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)^2)+((2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)^2)/((-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat)^2+(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat)^2+(a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)^2+(2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)^2)))^(2)+4*(((2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)*(-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat))/((-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat)^2+(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat)^2+(a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)^2+(2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)^2)+((a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)*(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat))/((-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat)^2+(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat)^2+(a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)^2+(2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)^2))^(2))+(4*(-(2*q1_hat*(a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat))/((-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat)^2+(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat)^2+(a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)^2+(2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)^2)+(2*q0_hat*(2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat))/((-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat)^2+(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat)^2+(a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)^2+(2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)^2)-((a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)^2*(-2*q3_hat*(-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat)+2*q2_hat*(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat)-2*q1_hat*(a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)+2*q0_hat*(2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)))/(((-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat)^2+(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat)^2+(a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)^2+(2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)^2)^(2))-((2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)^2*(-2*q3_hat*(-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat)+2*q2_hat*(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat)-2*q1_hat*(a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)+2*q0_hat*(2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)))/(((-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat)^2+(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat)^2+(a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)^2+(2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)^2)^(2)))*(((2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)*(-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat))/((-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat)^2+(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat)^2+(a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)^2+(2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)^2)+((a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)*(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat))/((-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat)^2+(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat)^2+(a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)^2+(2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)^2)))/((1-2*(((a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)^2)/((-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat)^2+(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat)^2+(a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)^2+(2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)^2)+((2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)^2)/((-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat)^2+(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat)^2+(a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)^2+(2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)^2)))^(2)+4*(((2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)*(-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat))/((-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat)^2+(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat)^2+(a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)^2+(2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)^2)+((a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)*(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat))/((-a2*q3_hat-a1*q2_hat-a0*q1_hat+2*q0_hat)^2+(-a1*q3_hat+a2*q2_hat+2*q1_hat+a0*q0_hat)^2+(a0*q3_hat+2*q2_hat-a2*q1_hat+a1*q0_hat)^2+(2*q3_hat-a0*q2_hat+a1*q1_hat+a2*q0_hat)^2))^(2)),0,0,0];
                y_hat = [0;0;0;];

                obj.EKF.R_k = obj.R(1:4, 1:4) / obj.sampleTime; % because only yaw is used and not the complete magnetometer
            end
        end
    end

    methods (Static)
        function M = crossproductMatrix(v)
            M = [0,-v(3),v(2); 
                 v(3),0,-v(1);
                 -v(2),v(1),0];
        end
    end

end